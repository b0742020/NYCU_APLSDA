
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE1_SOC(

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,

	//////////// SEG7 //////////
	output		     [0:6]		HEX0,
	output		     [0:6]		HEX1,
	output		     [0:6]		HEX2,
	output		     [0:6]		HEX3,
	output		     [0:6]		HEX4,
	output		     [0:6]		HEX5,

	//////////// IR //////////
	input 		          		IRDA_RXD,
	output		          		IRDA_TXD,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// Video-In //////////
	input 		          		TD_CLK27,
	input 		     [7:0]		TD_DATA,
	input 		          		TD_HS,
	output		          		TD_RESET_N,
	input 		          		TD_VS,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// HPS //////////
	inout 		          		HPS_CONV_USB_N,
	output		    [14:0]		HPS_DDR3_ADDR,
	output		     [2:0]		HPS_DDR3_BA,
	output		          		HPS_DDR3_CAS_N,
	output		          		HPS_DDR3_CKE,
	output		          		HPS_DDR3_CK_N,
	output		          		HPS_DDR3_CK_P,
	output		          		HPS_DDR3_CS_N,
	output		     [3:0]		HPS_DDR3_DM,
	inout 		    [31:0]		HPS_DDR3_DQ,
	inout 		     [3:0]		HPS_DDR3_DQS_N,
	inout 		     [3:0]		HPS_DDR3_DQS_P,
	output		          		HPS_DDR3_ODT,
	output		          		HPS_DDR3_RAS_N,
	output		          		HPS_DDR3_RESET_N,
	input 		          		HPS_DDR3_RZQ,
	output		          		HPS_DDR3_WE_N,
	output		          		HPS_ENET_GTX_CLK,
	inout 		          		HPS_ENET_INT_N,
	output		          		HPS_ENET_MDC,
	inout 		          		HPS_ENET_MDIO,
	input 		          		HPS_ENET_RX_CLK,
	input 		     [3:0]		HPS_ENET_RX_DATA,
	input 		          		HPS_ENET_RX_DV,
	output		     [3:0]		HPS_ENET_TX_DATA,
	output		          		HPS_ENET_TX_EN,
	inout 		     [3:0]		HPS_FLASH_DATA,
	output		          		HPS_FLASH_DCLK,
	output		          		HPS_FLASH_NCSO,
	inout 		     [1:0]		HPS_GPIO,
	inout 		          		HPS_GSENSOR_INT,
	inout 		          		HPS_I2C1_SCLK,
	inout 		          		HPS_I2C1_SDAT,
	inout 		          		HPS_I2C2_SCLK,
	inout 		          		HPS_I2C2_SDAT,
	inout 		          		HPS_I2C_CONTROL,
	inout 		          		HPS_KEY,
	inout 		          		HPS_LED,
	output		          		HPS_SD_CLK,
	inout 		          		HPS_SD_CMD,
	inout 		     [3:0]		HPS_SD_DATA,
	output		          		HPS_SPIM_CLK,
	input 		          		HPS_SPIM_MISO,
	output		          		HPS_SPIM_MOSI,
	inout 		          		HPS_SPIM_SS,
	input 		          		HPS_UART_RX,
	output		          		HPS_UART_TX,
	input 		          		HPS_USB_CLKOUT,
	inout 		     [7:0]		HPS_USB_DATA,
	input 		          		HPS_USB_DIR,
	input 		          		HPS_USB_NXT,
	output		          		HPS_USB_STP
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire [7:0] address;
reg read,write;
wire [7:0] readdata,writedata;  //
wire [7:0] byteenable;  //
wire [7:0] burstcount;   //
wire readdataval,waitrequest;
reg [1:0] state;

//=======================================================
//  Structural coding
//=======================================================
assign address    = 8'b00000001;
assign writedata  = SW[7:0];
assign byteenable = 8'b11111111;
assign burstcount = 8'b00000100;

soc_system s1(
		.memory_mem_a                                          (HPS_DDR3_ADDR),      //  output wire [14:0]                              .memory.mem_a
		.memory_mem_ba                                         (HPS_DDR3_BA),        //  output wire [2:0]                               .mem_ba
		.memory_mem_ck                                         (HPS_DDR3_CK_P),      //  output wire                                     .mem_ck
		.memory_mem_ck_n                                       (HPS_DDR3_CK_N),      //  output wire                                     .mem_ck_n
		.memory_mem_cke                                        (HPS_DDR3_CKE),       //  output wire                                     .mem_cke
		.memory_mem_cs_n                                       (HPS_DDR3_CS_N),      //  output wire                                     .mem_cs_n
		.memory_mem_ras_n                                      (HPS_DDR3_RAS_N),     //  output wire                                     .mem_ras_n
		.memory_mem_cas_n                                      (HPS_DDR3_CAS_N),     //  output wire                                     .mem_cas_n
		.memory_mem_we_n                                       (HPS_DDR3_WE_N),      //  output wire                                     .mem_we_n
		.memory_mem_reset_n                                    (HPS_DDR3_RESET_N),   //  output wire                                     .mem_reset_n
		.memory_mem_dq                                         (HPS_DDR3_DQ),        //  inout  wire [31:0]                              .mem_dq
		.memory_mem_dqs                                        (HPS_DDR3_DQS_P),     //  inout  wire [3:0]                               .mem_dqs
		.memory_mem_dqs_n                                      (HPS_DDR3_DQS_N),     //  inout  wire [3:0]                               .mem_dqs_n
		.memory_mem_odt                                        (HPS_DDR3_ODT),       //  output wire                                     .mem_odt
		.memory_mem_dm                                         (HPS_DDR3_DM),        //  output wire [3:0]                               .mem_dm
		.memory_oct_rzqin                                      (HPS_DDR3_RZQ),       //  input  wire                                     .oct_rzqin
		
		.clock_bridge_0_in_clk_clk                             (CLOCK_50),           //  input  wire                                     .clock_bridge_0_in_clk.clk
		.address_span_extender_0_windowed_slave_address        (address),            //  input  wire [15:0]                              .address_span_extender_0_windowed_slave.address
		.address_span_extender_0_windowed_slave_read           (read),               //  input  wire                                     .read
		.address_span_extender_0_windowed_slave_readdata       (readdata),           //  output wire [255:0]                             .readdata
		.address_span_extender_0_windowed_slave_write          (write),              //  input  wire                                     .write
		.address_span_extender_0_windowed_slave_writedata      (writedata),          //  input  wire [255:0]                             .writedata
		.address_span_extender_0_windowed_slave_readdatavalid  (readdataval),        //  output wire                                     .readdatavalid
		.address_span_extender_0_windowed_slave_waitrequest    (waitrequest),        //  output wire                                     .waitrequest
		.address_span_extender_0_windowed_slave_byteenable     (byteenable),         //  input  wire [31:0]                              .byteenable
		.address_span_extender_0_windowed_slave_burstcount     (burstcount)          //  input  wire [7:0]                               .burstcount
	);
	
always@(posedge CLOCK_50) begin
	if(SW[9])
		state = state+1;
	else 
		state = 0;
end 

always@(*)begin
	case(state)
		2'b00: begin
			read  = 0;
			write = 0;
		end
		2'b01: begin
			read  = 1;
			write = 0;
		end
		2'b10: begin
			read  = 0;
			write = 1;
		end
		default: begin
			read  = 0;
			write = 0;
		end
	endcase
end 

segment_7 u1(readdata[3:0],HEX0);
segment_7 u2(readdata[7:4],HEX1);
segment_7 u3(writedata[3:0],HEX2);
segment_7 u4(writedata[7:4],HEX3);
segment_7 u5({3'b000,readdataval},HEX4);
segment_7 u6({3'b000,waitrequest},HEX5);


endmodule
//=======================================================
module segment_7(in,out);  //七段顯示器兼 4 to 7 decoder

input [3:0]in;
output [0:6]out;
reg [0:6] seg;
    always @(*)
    begin
        case (in) //case statement    1暗0亮
            4'b0000 : seg = 7'b0000001;  //number0    0000001
            4'b0001 : seg = 7'b1001111;  //number1    1001111
            4'b0010 : seg = 7'b0010010;  //number2    0010010
            4'b0011 : seg = 7'b0000110;  //number3    0000110
            4'b0100 : seg = 7'b1001100;  //number4    1001100
            4'b0101 : seg = 7'b0100100;  //number5    0100100
            4'b0110 : seg = 7'b0100000;  //number6    0100000
            4'b0111 : seg = 7'b0001101;  //number7    0001101
            4'b1000 : seg = 7'b0000000;  //number8    0000000
            4'b1001 : seg = 7'b0000100;  //number9    0000100
            4'b1010 : seg = 7'b0001000;  //numberA 10   0001000
				4'b1011 : seg = 7'b1100000;  //numberB 11   1100000
				4'b1100 : seg = 7'b0110001;  //numberC 12   0110001
				4'b1101 : seg = 7'b1000010;  //numberD 13   1000010
				4'b1110 : seg = 7'b0110000;  //numberE 14   0110000
				4'b1111 : seg = 7'b0111000;  //numberF 15   0111000
        endcase
    end
	 
	 assign out=seg;

endmodule 
